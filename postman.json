{
	"info": {
		"_postman_id": "7c990139-b42a-4603-9c76-841a6cda01aa",
		"name": "OpenHaus",
		"description": "SmartHome/IoT application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Components",
			"item": [
				{
					"name": "Rooms",
					"item": [
						{
							"name": "Create new room",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check room name: input = output\", () => {",
											"",
											"    let res = pm.response.json();",
											"    let req = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(res.name).to.eql(req.name);",
											"",
											"});",
											"",
											"pm.test(\"Check properties\", () => {",
											"",
											"    let res = pm.response.json();",
											"",
											"    let props = [",
											"        \"name\", \"timestamps\", \"_id\",",
											"        \"number\", \"floor\", \"icon\"",
											"    ];",
											"",
											"    Object.keys(res).forEach((key) => {",
											"        pm.expect(props.includes(key)).to.be.true;",
											"    });",
											"",
											"    props.forEach((item) => {",
											"        pm.expect(Object.prototype.hasOwnProperty.call(res, item)).to.be.true;",
											"    });",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Livingroom\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/rooms",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"rooms"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all rooms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response has all properties\", () => {",
											"    let json = pm.response.json();",
											"    pm.expect(json).to.have.lengthOf(json.length);",
											"});",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Fooo\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhhbnMuaHViZXJ0QGV4YW1wbGUuY29tIiwidXVpZCI6ImM3N2E3NjJkLWM4ODYtNGQ2My1iNGM1LWU0MDJhZGNmYTdiZSIsImlhdCI6MTY1NDI2ODI4NX0.w4mkvTuJ-OXzTcmvWhwIT84oOmo2399hSEfWGbA-9SUWndMWUiHvly1A7-kSV93e",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/rooms?limit=100&offset=0",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"rooms"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge room",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/rooms/{{_id}}",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"rooms",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing room",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HOST = pm.collectionVariables.get(\"HOST\");",
											"const PORT = pm.collectionVariables.get(\"PORT\");",
											"",
											"//console.log(pm.request.url.toString())",
											"",
											"pm.sendRequest({",
											"    url: `http://${HOST}:${PORT}/api/rooms/`,",
											"    method: 'GET',",
											"}, function (err, res) {",
											"    if(err){",
											"",
											"        consle.error(err);",
											"",
											"    }else {",
											"",
											"        let data = res.json();",
											"        let key = Math.floor(Math.random()*data.length);",
											"        let item = data[key];",
											"",
											"        pm.variables.set(\"_id\", item._id);",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Garage\",\n    \"icon\": \"fa-solid fa-warehouse\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/rooms/63bf017582fa29f44cf8dfd6",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"rooms",
										"63bf017582fa29f44cf8dfd6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting room",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));",
											"",
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/rooms/63bf017582fa29f44cf8dfd6",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"rooms",
										"63bf017582fa29f44cf8dfd6"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Scenes",
					"item": [
						{
							"name": "Create new scene",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check room name: input = output\", () => {",
											"",
											"    let res = pm.response.json();",
											"    let req = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(res.name).to.eql(req.name);",
											"",
											"});",
											"",
											"pm.test(\"Check properties\", () => {",
											"",
											"    let res = pm.response.json();",
											"",
											"    let props = [",
											"        \"name\", \"timestamps\", \"_id\",",
											"        \"number\", \"floor\", \"icon\"",
											"    ];",
											"",
											"    Object.keys(res).forEach((key) => {",
											"        pm.expect(props.includes(key)).to.be.true;",
											"    });",
											"",
											"    props.forEach((item) => {",
											"        pm.expect(Object.prototype.hasOwnProperty.call(res, item)).to.be.true;",
											"    });",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Livingroom\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all scenes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response has all properties\", () => {",
											"    let json = pm.response.json();",
											"    pm.expect(json).to.have.lengthOf(json.length);",
											"});",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Fooo\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhhbnMuaHViZXJ0QGV4YW1wbGUuY29tIiwidXVpZCI6ImM3N2E3NjJkLWM4ODYtNGQ2My1iNGM1LWU0MDJhZGNmYTdiZSIsImlhdCI6MTY1NDI2ODI4NX0.w4mkvTuJ-OXzTcmvWhwIT84oOmo2399hSEfWGbA-9SUWndMWUiHvly1A7-kSV93e",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes?limit=3",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes"
									],
									"query": [
										{
											"key": "limit",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge scene",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes/6403506b0b4fe3536f0ba8d5",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes",
										"6403506b0b4fe3536f0ba8d5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing scene",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HOST = pm.collectionVariables.get(\"HOST\");",
											"const PORT = pm.collectionVariables.get(\"PORT\");",
											"",
											"//console.log(pm.request.url.toString())",
											"",
											"pm.sendRequest({",
											"    url: `http://${HOST}:${PORT}/api/rooms/`,",
											"    method: 'GET',",
											"}, function (err, res) {",
											"    if(err){",
											"",
											"        consle.error(err);",
											"",
											"    }else {",
											"",
											"        let data = res.json();",
											"        let key = Math.floor(Math.random()*data.length);",
											"        let item = data[key];",
											"",
											"        pm.variables.set(\"_id\", item._id);",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Evening\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes/6403506b0b4fe3536f0ba8d5",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes",
										"6403506b0b4fe3536f0ba8d5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting scene",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));",
											"",
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes/6403506b0b4fe3536f0ba8d5",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes",
										"6403506b0b4fe3536f0ba8d5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trigger scene",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes/6403506b0b4fe3536f0ba8d5/trigger",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes",
										"6403506b0b4fe3536f0ba8d5",
										"trigger"
									]
								}
							},
							"response": []
						},
						{
							"name": "Abort scene",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes/6403506b0b4fe3536f0ba8d5/abort",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes",
										"6403506b0b4fe3536f0ba8d5",
										"abort"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get scene state",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/scenes/6403506b0b4fe3536f0ba8d5/state",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"scenes",
										"6403506b0b4fe3536f0ba8d5",
										"state"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "MDNS",
					"item": [
						{
							"name": "Create mdns entry",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check room name: input = output\", () => {",
											"",
											"    let res = pm.response.json();",
											"    let req = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(res.name).to.eql(req.name);",
											"",
											"});",
											"",
											"pm.test(\"Check properties\", () => {",
											"",
											"    let res = pm.response.json();",
											"",
											"    let props = [",
											"        \"name\", \"timestamps\", \"_id\",",
											"        \"number\", \"floor\", \"icon\"",
											"    ];",
											"",
											"    Object.keys(res).forEach((key) => {",
											"        pm.expect(props.includes(key)).to.be.true;",
											"    });",
											"",
											"    props.forEach((item) => {",
											"        pm.expect(Object.prototype.hasOwnProperty.call(res, item)).to.be.true;",
											"    });",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"shelly*.local\",\n    \"type\": \"A\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mdns",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mdns"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mdns targets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response has all properties\", () => {",
											"    let json = pm.response.json();",
											"    pm.expect(json).to.have.lengthOf(json.length);",
											"});",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Fooo\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhhbnMuaHViZXJ0QGV4YW1wbGUuY29tIiwidXVpZCI6ImM3N2E3NjJkLWM4ODYtNGQ2My1iNGM1LWU0MDJhZGNmYTdiZSIsImlhdCI6MTY1NDI2ODI4NX0.w4mkvTuJ-OXzTcmvWhwIT84oOmo2399hSEfWGbA-9SUWndMWUiHvly1A7-kSV93e",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mdns",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mdns"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge mdns target",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mdns/63e7f7ba26b161df7f3af1d6",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mdns",
										"63e7f7ba26b161df7f3af1d6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update mdns target",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HOST = pm.collectionVariables.get(\"HOST\");",
											"const PORT = pm.collectionVariables.get(\"PORT\");",
											"",
											"//console.log(pm.request.url.toString())",
											"",
											"pm.sendRequest({",
											"    url: `http://${HOST}:${PORT}/api/rooms/`,",
											"    method: 'GET',",
											"}, function (err, res) {",
											"    if(err){",
											"",
											"        consle.error(err);",
											"",
											"    }else {",
											"",
											"        let data = res.json();",
											"        let key = Math.floor(Math.random()*data.length);",
											"        let item = data[key];",
											"",
											"        pm.variables.set(\"_id\", item._id);",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"labels\": [\n        \"manufacturer=shelly\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mdns/63e7f7ba26b161df7f3af1d6",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mdns",
										"63e7f7ba26b161df7f3af1d6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete mdns target",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));",
											"",
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mdns/63e7f7ba26b161df7f3af1d6",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mdns",
										"63e7f7ba26b161df7f3af1d6"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "MQTT",
					"item": [
						{
							"name": "Create mqtt topic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check room name: input = output\", () => {",
											"",
											"    let res = pm.response.json();",
											"    let req = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(res.name).to.eql(req.name);",
											"",
											"});",
											"",
											"pm.test(\"Check properties\", () => {",
											"",
											"    let res = pm.response.json();",
											"",
											"    let props = [",
											"        \"name\", \"timestamps\", \"_id\",",
											"        \"number\", \"floor\", \"icon\"",
											"    ];",
											"",
											"    Object.keys(res).forEach((key) => {",
											"        pm.expect(props.includes(key)).to.be.true;",
											"    });",
											"",
											"    props.forEach((item) => {",
											"        pm.expect(Object.prototype.hasOwnProperty.call(res, item)).to.be.true;",
											"    });",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"topic\": \"air-sensor/sensor/particulate_matter_25m_concentration\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mqtt",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mqtt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mqtt topics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response has all properties\", () => {",
											"    let json = pm.response.json();",
											"    pm.expect(json).to.have.lengthOf(json.length);",
											"});",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Fooo\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhhbnMuaHViZXJ0QGV4YW1wbGUuY29tIiwidXVpZCI6ImM3N2E3NjJkLWM4ODYtNGQ2My1iNGM1LWU0MDJhZGNmYTdiZSIsImlhdCI6MTY1NDI2ODI4NX0.w4mkvTuJ-OXzTcmvWhwIT84oOmo2399hSEfWGbA-9SUWndMWUiHvly1A7-kSV93e",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mqtt",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mqtt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge mqtt topic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mqtt/63e8f7d2ab413a9760e9b08c",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mqtt",
										"63e8f7d2ab413a9760e9b08c"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update mqtt topic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HOST = pm.collectionVariables.get(\"HOST\");",
											"const PORT = pm.collectionVariables.get(\"PORT\");",
											"",
											"//console.log(pm.request.url.toString())",
											"",
											"pm.sendRequest({",
											"    url: `http://${HOST}:${PORT}/api/rooms/`,",
											"    method: 'GET',",
											"}, function (err, res) {",
											"    if(err){",
											"",
											"        consle.error(err);",
											"",
											"    }else {",
											"",
											"        let data = res.json();",
											"        let key = Math.floor(Math.random()*data.length);",
											"        let item = data[key];",
											"",
											"        pm.variables.set(\"_id\", item._id);",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Ikea VINDRIKTNING MQTT modd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mqtt/63e8f7d2ab413a9760e9b08c",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mqtt",
										"63e8f7d2ab413a9760e9b08c"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete mqtt topic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));",
											"",
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/mqtt/63e8f7d2ab413a9760e9b08c",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"mqtt",
										"63e8f7d2ab413a9760e9b08c"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "SSDP",
					"item": [
						{
							"name": "Create new ssdp item",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check room name: input = output\", () => {",
											"",
											"    let res = pm.response.json();",
											"    let req = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(res.name).to.eql(req.name);",
											"",
											"});",
											"",
											"pm.test(\"Check properties\", () => {",
											"",
											"    let res = pm.response.json();",
											"",
											"    let props = [",
											"        \"name\", \"timestamps\", \"_id\",",
											"        \"number\", \"floor\", \"icon\"",
											"    ];",
											"",
											"    Object.keys(res).forEach((key) => {",
											"        pm.expect(props.includes(key)).to.be.true;",
											"    });",
											"",
											"    props.forEach((item) => {",
											"        pm.expect(Object.prototype.hasOwnProperty.call(res, item)).to.be.true;",
											"    });",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"nt\": \"urn:schemas-upnp-org:device:sensor:1\",\n        \"description\": null,\n        \"usn\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/ssdp",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"ssdp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ssdp items",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response has all properties\", () => {",
											"    let json = pm.response.json();",
											"    pm.expect(json).to.have.lengthOf(json.length);",
											"});",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(\"Fooo\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhhbnMuaHViZXJ0QGV4YW1wbGUuY29tIiwidXVpZCI6ImM3N2E3NjJkLWM4ODYtNGQ2My1iNGM1LWU0MDJhZGNmYTdiZSIsImlhdCI6MTY1NDI2ODI4NX0.w4mkvTuJ-OXzTcmvWhwIT84oOmo2399hSEfWGbA-9SUWndMWUiHvly1A7-kSV93e",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/ssdp",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"ssdp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge ssdp item",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/ssdp/63cbcdb1f2c46434242de489",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"ssdp",
										"63cbcdb1f2c46434242de489"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing ssdp item",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Search for sensor via SSDP\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/ssdp/63cbcdb1f2c46434242de489",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"ssdp",
										"63cbcdb1f2c46434242de489"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting ssdp item",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));",
											"",
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/ssdp/63cbcdb1f2c46434242de489",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"ssdp",
										"63cbcdb1f2c46434242de489"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check room name: input = output\", () => {",
											"",
											"    let res = pm.response.json();",
											"    let req = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(res.name).to.eql(req.name);",
											"",
											"});",
											"",
											"pm.test(\"Check properties\", () => {",
											"",
											"    let res = pm.response.json();",
											"",
											"    let props = [",
											"        \"name\", \"timestamps\", \"_id\",",
											"        \"number\", \"floor\", \"icon\"",
											"    ];",
											"",
											"    Object.keys(res).forEach((key) => {",
											"        pm.expect(props.includes(key)).to.be.true;",
											"    });",
											"",
											"    props.forEach((item) => {",
											"        pm.expect(Object.prototype.hasOwnProperty.call(res, item)).to.be.true;",
											"    });",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Hans Hubert #3\",\n    \"email\": \"hans.hubert3@example.com\",\n    \"password\": \"Pa$$w0rd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/users?options[returnDuplicate]=false",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "options[returnDuplicate]",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-TOKEN",
										"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiaGFucy5odWJlcnRAZXhhbXBsZS5jb20iLCJ1dWlkIjoiYzc3YTc2MmQtYzg4Ni00ZDYzLWI0YzUtZTQwMmFkY2ZhN2JlIiwiaWF0IjoxNjUzMTUwMDIyfQ.vA26GhU8EiNW3EmMvT4aw1_p8Pd8q-9n0xjXK6-iNrx8nCdjSTcpaq1QEtbDC4uE",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/users",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/users/6288b67b1f3bc42774ce0ec1",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"users",
										"6288b67b1f3bc42774ce0ec1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const HOST = pm.collectionVariables.get(\"HOST\");",
											"const PORT = pm.collectionVariables.get(\"PORT\");",
											"",
											"//console.log(pm.request.url.toString())",
											"",
											"pm.sendRequest({",
											"    url: `http://${HOST}:${PORT}/api/rooms/`,",
											"    method: 'GET',",
											"}, function (err, res) {",
											"    if(err){",
											"",
											"        consle.error(err);",
											"",
											"    }else {",
											"",
											"        let data = res.json();",
											"        let key = Math.floor(Math.random()*data.length);",
											"        let item = data[key];",
											"",
											"        pm.variables.set(\"_id\", item._id);",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"FooBarBaz\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/users/6288b67b1f3bc42774ce0ec1",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"users",
										"6288b67b1f3bc42774ce0ec1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting room",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"_id varaible\", pm.variables.get(\"_id\"));",
											"",
											"pm.test(\"status code: 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/users/6288b67b1f3bc42774ce0ec1",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"users",
										"6288b67b1f3bc42774ce0ec1"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Plugins",
					"item": [
						{
							"name": "Create new plugin",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Phoscon Gateway\",\n    \"enabled\": true,\n    \"version\": 1,\n    \"intents\": [\n        \"devices\", \n        \"endpoints\", \n        \"ssdp\", \n        \"vault\", \n        \"store\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins/",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload plugin *.tgz content",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins/63a17284ba003ca7440f97e3/files",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins",
										"63a17284ba003ca7440f97e3",
										"files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete plugin *.tgz content",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "/home/marc/projects/playground/oh-plg-dummy/oh-plg-dummy-v1.0.0.tgz"
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins/639efd69e42746a787a02455/files",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins",
										"639efd69e42746a787a02455",
										"files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all plugins",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge plugin",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins/<id>",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins",
										"<id>"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing plugins",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"enabled\": true,\n    \"autostart\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins/61103781f897a74ae9ca89c7",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins",
										"61103781f897a74ae9ca89c7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting plugins",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins/62868c7e9af74130e98863c1",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins",
										"62868c7e9af74130e98863c1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start plugin",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/plugins/63f500ea2b40698e90e63beb/start",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"plugins",
										"63f500ea2b40698e90e63beb",
										"start"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Devices",
					"item": [
						{
							"name": "Create new devices",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"SmartMeter\",\n    \"interfaces\": [{\n        \"type\": \"ETHERNET\",\n        \"description\": \"WebSocket API\",\n        \"settings\": {\n            \"host\": \"192.168.2.155\",\n            \"port\": 8080\n        },\n        \"adapter\": [\"raw\"]\n    }],\n    \"room\": \"62a4bc8bd9256b5e8d6988a0\",\n    \"icon\": \"fa-solid fa-gauge-high\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/devices",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all devices",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/devices",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge device",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/devices/6042785432c51e3e98e7acc0",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"devices",
										"6042785432c51e3e98e7acc0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing device",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"enabled\": true,\n    \"name\": \"SaMsUnG FrIdGe\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/devices/63bf020e82fa29f44cf8dfd8",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"devices",
										"63bf020e82fa29f44cf8dfd8"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting device",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/devices/61103caa50139f51160ae790",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"devices",
										"61103caa50139f51160ae790"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Endpoints",
					"item": [
						{
							"name": "Create new endpoint",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Dummy Endpoint\",\n  \"device\": \"6398ae590dce390161f7fc2f\",\n  \"states\": [\n    {\n      \"name\": \"Total Power\",\n      \"alias\": \"POWER_TOTAL\",\n      \"type\": \"number\"\n    },\n    {\n      \"name\": \"Powerd on?\",\n      \"alias\": \"POWERD_ON\",\n      \"type\": \"boolean\"\n    }\n  ],\n  \"commands\": [\n    {\n      \"name\": \"Switch to Input 03\",\n      \"payload\": {\n        \"type\": \"Buffer\",\n        \"data\": [\n          115,\n          119,\n          32,\n          105,\n          48,\n          51,\n          13,\n          10\n        ]\n      },\n      \"alias\": \"INPUT_03\",\n      \"interface\": \"6398ae590dce390161f7fc30\"\n    },\n    {\n      \"name\": \"Command as String\",\n      \"payload\": \"foobar\",\n      \"alias\": \"STRING_CMD\",\n      \"interface\": \"6398ae590dce390161f7fc30\"\n    }\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/endpoints",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all endpoints",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/endpoints",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge endpoint",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/endpoints/604a75e6eb5de037846df24f",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"endpoints",
										"604a75e6eb5de037846df24f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing endpoint",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "   {\n        \"_id\": \"63a5a4c2bd5fe7cb165960d0\",\n        \"name\": \"Fernseher\",\n        \"device\": \"63a5a4c2bd5fe7cb165960cd\",\n        \"commands\": [\n            {\n                \"payload\": \"KEY_0\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_0\",\n                \"name\": \"KEY_0\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d1\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_1\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_1\",\n                \"name\": \"KEY_1\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d2\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_2\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_2\",\n                \"name\": \"KEY_2\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d3\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_3\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_3\",\n                \"name\": \"KEY_3\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d4\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_4\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_4\",\n                \"name\": \"KEY_4\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d5\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_5\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_5\",\n                \"name\": \"KEY_5\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d6\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_6\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_6\",\n                \"name\": \"KEY_6\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d7\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_7\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_7\",\n                \"name\": \"KEY_7\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d8\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_8\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_8\",\n                \"name\": \"KEY_8\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960d9\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_9\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_9\",\n                \"name\": \"KEY_9\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960da\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_10\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_10\",\n                \"name\": \"KEY_10\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960db\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_11\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_11\",\n                \"name\": \"KEY_11\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960dc\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_12\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_12\",\n                \"name\": \"KEY_12\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960dd\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_CHDOWN\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_CHDOWN\",\n                \"name\": \"KEY_CHDOWN\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960de\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_CHUP\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_CHUP\",\n                \"name\": \"KEY_CHUP\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960df\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_VOLDOWN\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_VOLDOWN\",\n                \"name\": \"KEY_VOLDOWN\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e0\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_VOLUP\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_VOLUP\",\n                \"name\": \"KEY_VOLUP\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e1\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_MUTE\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_MUTE\",\n                \"name\": \"KEY_MUTE\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e2\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_SOURCE\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_SOURCE\",\n                \"name\": \"KEY_SOURCE\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e3\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_LEFT\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_LEFT\",\n                \"name\": \"KEY_LEFT\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e4\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_RIGHT\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_RIGHT\",\n                \"name\": \"KEY_RIGHT\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e5\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_UP\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_UP\",\n                \"name\": \"KEY_UP\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e6\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_DOWN\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_DOWN\",\n                \"name\": \"KEY_DOWN\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e7\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_ENTER\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_ENTER\",\n                \"name\": \"KEY_ENTER\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e8\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_MENU\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_MENU\",\n                \"name\": \"KEY_MENU\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960e9\",\n                \"identifier\": null,\n                \"description\": null\n            },\n            {\n                \"payload\": \"KEY_EXIT\",\n                \"interface\": \"63a5a4c2bd5fe7cb165960ce\",\n                \"alias\": \"KEY_EXIT\",\n                \"name\": \"KEY_EXIT\",\n                \"_id\": \"63a5a4c2bd5fe7cb165960ea\",\n                \"identifier\": null,\n                \"description\": null\n            }\n        ],\n        \"timestamps\": {\n            \"created\": 1671800002321,\n            \"updated\": null\n        },\n        \"enabled\": true,\n        \"room\": \"62a4bbf0d9256b5e8d69889c\",\n        \"states\": [],\n        \"identifier\": null,\n        \"icon\": \"fa-solid fa-tv\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/endpoints/63a5a4c2bd5fe7cb165960d0",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"endpoints",
										"63a5a4c2bd5fe7cb165960d0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting endpoint",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/endpoints/61103caa50139f51160ae790",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"endpoints",
										"61103caa50139f51160ae790"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trigger command",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\n    \"key\": \"VOLUME\",\n    \"value\": 15\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/endpoints/610e865a0c7edd636843a409/commands/610e865a0c7edd636843a406",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"endpoints",
										"610e865a0c7edd636843a409",
										"commands",
										"610e865a0c7edd636843a406"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set endpoint state",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": 54\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/endpoints/6398b0bcf8a893ef43e283d5/states/6398b0bcf8a893ef43e283d8",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"endpoints",
										"6398b0bcf8a893ef43e283d5",
										"states",
										"6398b0bcf8a893ef43e283d8"
									]
								},
								"description": "TODO!"
							},
							"response": []
						}
					]
				},
				{
					"name": "Vault",
					"item": [
						{
							"name": "Create new vault",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.payload = JSON.parse(pm.request.body.raw);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"console.log(pm.request.payload)",
											"",
											"pm.test(\"Input = Output name\", () => {",
											"",
											"    ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"FritzBox\",\n    \"identifier\": \"FRITZBOX\",\n    \"secrets\": [{\n        \"key\": \"USERNAME\",\n        \"name\": \"Username\",\n        \"value\": \"username@example.com\"\n    }, {\n        \"key\": \"PASSWORD\",\n        \"name\": \"Password\",\n        \"value\": \"Pa$$w0rd\"\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all vaults",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge vault",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault/63a5a4c2bd5fe7cb165960eb",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault",
										"63a5a4c2bd5fe7cb165960eb"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get vault secrets",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault/639c9562cece5101bdccdeb1/secrets",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault",
										"639c9562cece5101bdccdeb1",
										"secrets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Encrypt secret",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"Pa$$w0rd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault/637a5f290a21379bf30c62be/secrets/637a614b0a21379bf30c62c2/encrypt",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault",
										"637a5f290a21379bf30c62be",
										"secrets",
										"637a614b0a21379bf30c62c2",
										"encrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decrypt secret",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"PASSWORD\": \"Pa$$w0rd\",\n    \"USERNAME\": \"user-1@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault/637a5f290a21379bf30c62be/secrets/637a614b0a21379bf30c62c2/decrypt",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault",
										"637a5f290a21379bf30c62be",
										"secrets",
										"637a614b0a21379bf30c62c2",
										"decrypt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing vault",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Fritzbox (Router/DECT GW)\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault/61a15b436d63a6517e1385ed",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault",
										"61a15b436d63a6517e1385ed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exisiting vault",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/vault/<id>",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"vault",
										"<id>"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Store",
					"item": [
						{
							"name": "Create new store entry",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.payload = JSON.parse(pm.request.body.raw);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"console.log(pm.request.payload)",
											"",
											"pm.test(\"Input = Output name\", () => {",
											"",
											"    ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"config\": [{\n        \"key\": \"pairing\",\n        \"type\": \"boolean\",\n        \"value\": false,\n        \"description\": \"Is the Gateway ready for pairing?\"\n    }, {\n        \"key\": \"interval\",\n        \"type\": \"number\",\n        \"value\": 3000,\n        \"description\": \"Sync intervall for Endpoints\"\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all config items",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single store item",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store/626cf0d940cbe8290f0b4e3f",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store",
										"626cf0d940cbe8290f0b4e3f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all config items from store",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store/6377697882393a47683cc76c/config",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store",
										"6377697882393a47683cc76c",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sinlge config item from store",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store/6377697882393a47683cc76c/config/6377697882393a47683cc76e",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store",
										"6377697882393a47683cc76c",
										"config",
										"6377697882393a47683cc76e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update single config value",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store/63a035ceb3add4c2c7b79d05/config/63a035ceb3add4c2c7b79d06",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store",
										"63a035ceb3add4c2c7b79d05",
										"config",
										"63a035ceb3add4c2c7b79d06"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing config entry",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"6375343d0b555ccd42460a2e\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store/6375352db0c7df8ecab9e7ad",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store",
										"6375352db0c7df8ecab9e7ad"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete config entry",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{HOST}}:{{PORT}}/api/store/63a035ceb3add4c2c7b79d05",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"api",
										"store",
										"63a035ceb3add4c2c7b79d05"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"compoents pre request script\")",
							"",
							"",
							"/*",
							"",
							"        console.log(\"Name3\", name)",
							"",
							"        let HOST = pm.collectionVariables.get(\"HOST\");",
							"        let PORT = pm.collectionVariables.get(\"PORT\");",
							"",
							"        pm.sendRequest({",
							"            url: `http://${HOST}:${PORT}/api/${name}/`,",
							"            method: 'GET',",
							"        }, (err, res) => {",
							"            if(err){",
							"",
							"                console.log(\"err\", err)",
							"",
							"                consle.error(err);",
							"                done(err);",
							"",
							"            }else {",
							"",
							"                console.log(\"Callback\")",
							"",
							"                let data = res.json();",
							"                let key = Math.floor(Math.random()*data.length);",
							"                let item = data[key];",
							"",
							"                pm.variables.set(\"_id\", item._id);",
							"",
							"                done(null, item._id);",
							"",
							"            }",
							"        });",
							"*/"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"application/content = json\", () => {",
							"    pm.response.to.be.json",
							"});",
							"",
							"pm.test(\"Response has no error field\", () => {",
							"    let json = pm.response.json();",
							"    pm.expect(!json.error);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Logfiles",
			"item": [
				{
					"name": "Get logfile entrys",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}:{{PORT}}/api/logs/?offset=0&limit=3",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"logs",
								""
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": null
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhhbnMuaHViZXJ0QGV4YW1wbGUuY29tIiwidXVpZCI6ImM3N2E3NjJkLWM4ODYtNGQ2My1iNGM1LWU0MDJhZGNmYTdiZSIsImlhdCI6MTY1MzUyMDM1Mn0.10H4v6IhiI2mlaiSAcbTp2m4QUSueA1l4c2CPGV8L7WltZfXia8pLCnbYC243LPz",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"hans.hubert@example.com\",\n    \"password\": \"Pa$$w0rd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}:{{PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "eyJhbGciOiJIUzM4NCIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhhbnMuaHViZXJ0QGV4YW1wbGUuY29tIiwidXVpZCI6ImM3N2E3NjJkLWM4ODYtNGQ2My1iNGM1LWU0MDJhZGNmYTdiZSIsImlhdCI6MTY1MzUxOTUwNH0.5iByWpBxCHVj0c1mHEv0Skz47SSGps7BbfDOPVFppSFWwJfLwa09jx8MSBrJTC_E",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}:{{PORT}}/auth/logout",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if auth is required",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}:{{PORT}}/auth",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "127.0.0.1"
		},
		{
			"key": "PORT",
			"value": "8080"
		},
		{
			"key": "X-AUTH-TOKEN",
			"value": "<do login to set token>"
		}
	]
}